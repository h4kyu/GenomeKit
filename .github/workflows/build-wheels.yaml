name: build-wheels
run-name: build-wheels

on:
  push:
    tags: [ "v*" ]
#    paths:
#      - ".github/workflows/**"
#      - "conda-recipe/**"
#      - "genome_kit/**"
#      - "setup.py"
#      - "setup/**"
#      - "src/**"
#      - "tests/**"

jobs:
  build:
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        python: [3.9, 3.10, 3.11, 3.12]

    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}

    env:
      DOCKER_IMAGE: ${{ matrix.arch == 'x86_64' && 'quay.io/pypa/manylinux_2_28_x86_64' || 'quay.io/pypa/manylinux_2_28_aarch64' }}
      WHEEL_DIR: ${{ matrix.arch == 'x86_64' && 'wheels' || 'wheels/arm' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull manylinux image
        run: docker pull $DOCKER_IMAGE

      - name: Build and repair wheel (Python ${{ matrix.python }})
        run: |
          docker run --rm -v $(pwd):/io -e GK_BUILD_WHEELS=1 $DOCKER_IMAGE /bin/bash -c "
            set -euxo pipefail
            PYTHON=/opt/python/cp${{ matrix.python | replace('.', '') }}-cp${{ matrix.python | replace('.', '') }}/bin/python

            cd /io
            mkdir -p $WHEEL_DIR

            \$PYTHON -m pip install -U pip setuptools wheel cmake auditwheel numpy==2
            rm -rf build dist *.egg-info
            \$PYTHON setup.py bdist_wheel
            cp dist/*.whl $WHEEL_DIR/
          "

      - name: Test wheel (Python ${{ matrix.python }})
        run: |
          TAG="cp${{ matrix.python | replace('.', '') }}"

          docker run --rm \
            -v $(pwd)/${{ env.WHEEL_DIR }}:/wheels \
            -v $(pwd)/tests:/tests \
            python:${{ matrix.python }}-slim /bin/bash -c "
              set -euxo pipefail

              apt-get update && apt-get install -y gcc python3-dev
              python -m pip install --upgrade pip

              WHEEL=\$(ls /wheels/*${TAG}*.whl | head -n 1)
              echo 'Installing wheel: ' \$WHEEL
              python -m pip install \$WHEEL

              python -c 'import genome_kit; print(genome_kit.__version__)'
              ls /tests/test_*.py | sed 's/\.py$//' | sed 's/\/tests\//tests./' | CI=1 xargs --verbose -I {} python -m unittest {}
            "
