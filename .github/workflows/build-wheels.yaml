name: build-wheels.yaml

on:
  push:
    branches: [feature/build-wheels-pypi-dist]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: python -m pip install -U pip wheel setuptools numpy

      - name: Install system libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libfmt-dev patchelf

      - name: Clean build dirs
        run: rm -rf build dist genome_kit/*.so

      - name: Build wheel (no isolation)
        run: python setup.py bdist_wheel

      - name: Inspect linked libraries of C++ extension
        run: |
          echo "üîç Running ldd on built extension(s)..."
          find build -name '*.so' -exec echo "üîó ldd {}" \; -exec ldd {} \;

      - name: List all .so files before repair
        run: find . -name "*.so"

      - name: Install auditwheel
        run: python -m pip install auditwheel

      - name: Bundle .so dependencies using auditwheel
        run: |
          mkdir -p repaired_wheels
          for whl in dist/*.whl; do
            auditwheel repair "$whl" --plat linux_x86_64 -w repaired_wheels/
          done

      - name: List .so files inside final wheel
        run: |
          unzip -l repaired_wheels/*.whl | grep '\.so'
          

      - name: Remove system libraries from wheel
        run: |
          for whl in repaired_wheels/*.whl; do
            unzip -q "$whl" -d wheel_contents
            rm -v wheel_contents/genomekit.libs/libc-*.so.*
            rm -v wheel_contents/genomekit.libs/libstdc++-*.so.*
            rm -v wheel_contents/genomekit.libs/libgcc_s-*.so.*
            rm -v wheel_contents/genomekit.libs/libm-*.so.*
            (cd wheel_contents && zip -r "../cleaned-$(basename "$whl")" .)
            rm -rf wheel_contents
          done

      - uses: actions/upload-artifact@v4
        with:
          name: genomekit-wheels-linux
          path: cleaned-*.whl

#      - uses: actions/upload-artifact@v4
#        with:
#          name: genomekit-wheels-linux
#          path: repaired_wheels/*.whl









#name: build-wheels.yaml
#
#on:
#  push:
#    branches: [feature/build-wheels-pypi-dist]
#  pull_request:
#
#jobs:
#  build:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-latest, macos-latest]
#        # Temporarily disabled Windows:
#        # os: [ubuntu-latest, macos-latest, windows-latest]
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.12'
#
#      - name: Install build dependencies
#        run: python -m pip install -U pip wheel setuptools numpy
#
#      - name: Install fmt (Linux)
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y libfmt-dev
#
#      - name: Install fmt (macOS)
#        if: matrix.os == 'macos-latest'
#        run: |
#          brew install fmt
#
#      - name: Build wheel (no isolation)
#        run: python setup.py bdist_wheel
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: genomekit-wheels-${{ matrix.os }}
#          path: dist/*.whl






#jobs:
#  build:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.12"
#
#      # Optional: Upgrade pip/build tools
#      - name: Upgrade build dependencies
#        run: python -m pip install --upgrade pip build setuptools wheel numpy
#
#      # ----------- Linux & macOS: Install fmt via system -----------
#      - name: Install fmt (Linux)
#        if: matrix.os == 'ubuntu-latest'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y libfmt-dev
#
#      - name: Install fmt (macOS)
#        if: matrix.os == 'macos-latest'
#        run: |
#          brew install fmt
#
#      # Windows: requires fmt to be pre-installed or vendored (TODO if needed)
#
#      # ----------- Build the wheel -----------
#      - name: Build wheel
#        run: python -m build
#
#      # Upload the wheel
#      - uses: actions/upload-artifact@v4
#        with:
#          name: genomekit-wheels-${{ matrix.os }}
#          path: dist/*.whl



#jobs:
#  build_wheels:
#    name: Build wheels on ${{ matrix.os }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.12'  # Only for installing cibuildwheel; cibuildwheel handles all versions
#
#      - name: Install cibuildwheel
#        run: python -m pip install cibuildwheel
#
#      - name: Build wheels
#        run: python -m cibuildwheel --output-dir dist
#
#        env:
#          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
#          CIBW_SKIP: "*-musllinux*"
#          CIBW_ARCHS_MACOS: "x86_64 arm64"
#          CIBW_ENVIRONMENT: "CXXFLAGS='-std=c++20'"
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: built-wheels
#          path: dist
#
